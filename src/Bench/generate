#!/usr/bin/env php
<?php

// Get all command line arguments
$args = arguments($argv);

// Get plugin name to create
$plugin_name = $args['arguments'][0];
$plugin_name = strtolower($plugin_name);

if (! isValid($plugin_name)) {
    die('Cannot create addon.  Invalid addon name.');
}

// Setup working paths
$plugin_folder = dirname(__FILE__);
$stub_folder_path = $plugin_folder.'/stubs';
$addon_folder_path = $plugin_folder.'/'.$plugin_name;

if (file_exists($addon_folder_path)) {
    die('Cannot create addon.  Folder already exists.');
}

// Copy all stub files to new plugin folder
recurse_copy($stub_folder_path, $addon_folder_path);

// Rename folders with new addon name
rename_dir($addon_folder_path.'/app/addons/pluginname', $addon_folder_path.'/app/addons/'.$plugin_name);
rename_dir($addon_folder_path.'/design/backend/css/addons/pluginname', $addon_folder_path.'/design/backend/css/addons/'.$plugin_name);
rename_dir($addon_folder_path.'/design/backend/media/images/addons/pluginname', $addon_folder_path.'/design/backend/media/images/addons/'.$plugin_name);
rename_dir($addon_folder_path.'/design/backend/templates/addons/pluginname', $addon_folder_path.'/design/backend/templates/addons/'.$plugin_name);

// Rename language file
rename_dir($addon_folder_path.'/var/langs/en/addons/pluginname.po', $addon_folder_path.'/var/langs/en/addons/'.$plugin_name.'.po');

// Replace 'pluginname' with actual addon name
replace_in_file($addon_folder_path.'/app/addons/'.$plugin_name.'/addon.xml', 'pluginname', $plugin_name);
replace_in_file($addon_folder_path.'/design/backend/css/addons/'.$plugin_name.'/styles.css', 'pluginname', $plugin_name);
replace_in_file($addon_folder_path.'/design/backend/templates/addons/'.$plugin_name.'/hooks/index/styles.post.tpl', 'pluginname', $plugin_name);
replace_in_file($addon_folder_path.'/var/langs/en/addons/'.$plugin_name.'.po', 'pluginname', $plugin_name);
replace_in_file($addon_folder_path.'/README.md', 'pluginname', $plugin_name);

// Setup symlinks
symlink($addon_folder_path.'/app/addons/'.$plugin_name, $plugin_folder.'/../app/addons/'.$plugin_name);
symlink($addon_folder_path.'/design/backend/css/addons/'.$plugin_name, $plugin_folder.'/../design/backend/css/addons/'.$plugin_name);
symlink($addon_folder_path.'/design/backend/media/images/addons/'.$plugin_name, $plugin_folder.'/../design/backend/media/images/addons/'.$plugin_name);
symlink($addon_folder_path.'/design/backend/templates/addons/'.$plugin_name, $plugin_folder.'/../design/backend/templates/addons/'.$plugin_name);
symlink($addon_folder_path.'/var/langs/en/addons/'.$plugin_name.'.po', $plugin_folder.'/../var/langs/en/addons/'.$plugin_name.'.po');


function isValid($str) {
    return !preg_match('/[^A-Za-z0-9._#\\-$]/', $str);
}

/**
 * Replaces a string in a file
 *
 * @param string $FilePath
 * @param string $OldText text to be replaced
 * @param string $NewText new text
 * @return array $Result status (success | error) & message (file exist, file permissions)
 */
function replace_in_file($FilePath, $OldText, $NewText)
{
    $Result = array('status' => 'error', 'message' => '');
    if(file_exists($FilePath)===TRUE)
    {
        if(is_writeable($FilePath))
        {
            try
            {
                $FileContent = file_get_contents($FilePath);
                $FileContent = str_replace($OldText, $NewText, $FileContent);
                if(file_put_contents($FilePath, $FileContent) > 0)
                {
                    $Result["status"] = 'success';
                }
                else
                {
                    $Result["message"] = 'Error while writing file';
                }
            }
            catch(Exception $e)
            {
                $Result["message"] = 'Error : '.$e;
            }
        }
        else
        {
            $Result["message"] = 'File '.$FilePath.' is not writable !';
        }
    }
    else
    {
        $Result["message"] = 'File '.$FilePath.' does not exist !';
    }
    return $Result;
}

function rename_dir($src, $dst)
{
    if (! file_exists($src)) return false;

    return rename($src, $dst);
}

function recurse_copy($src,$dst) {
    $dir = opendir($src);
    @mkdir($dst);
    while(false !== ( $file = readdir($dir)) ) {
        if (( $file != '.' ) && ( $file != '..' )) {
            if ( is_dir($src . '/' . $file) ) {
                recurse_copy($src . '/' . $file,$dst . '/' . $file);
            }
            else {
                copy($src . '/' . $file,$dst . '/' . $file);
            }
        }
    }
    closedir($dir);
}

function arguments ( $args )
{
    array_shift( $args );
    $endofoptions = false;

    $ret = array
    (
        'commands' => array(),
        'options' => array(),
        'flags'    => array(),
        'arguments' => array(),
    );

    while ( $arg = array_shift($args) )
    {

        // if we have reached end of options,
        //we cast all remaining argvs as arguments
        if ($endofoptions)
        {
            $ret['arguments'][] = $arg;
            continue;
        }

        // Is it a command? (prefixed with --)
        if ( substr( $arg, 0, 2 ) === '--' )
        {

            // is it the end of options flag?
            if (!isset ($arg[3]))
            {
                $endofoptions = true;; // end of options;
                continue;
            }

            $value = "";
            $com   = substr( $arg, 2 );

            // is it the syntax '--option=argument'?
            if (strpos($com,'='))
                list($com,$value) = split("=",$com,2);

            // is the option not followed by another option but by arguments
            elseif (strpos($args[0],'-') !== 0)
            {
                while (strpos($args[0],'-') !== 0)
                    $value .= array_shift($args).' ';
                $value = rtrim($value,' ');
            }

            $ret['options'][$com] = !empty($value) ? $value : true;
            continue;

        }

        // Is it a flag or a serial of flags? (prefixed with -)
        if ( substr( $arg, 0, 1 ) === '-' )
        {
            for ($i = 1; isset($arg[$i]) ; $i++)
                $ret['flags'][] = $arg[$i];
            continue;
        }

        // finally, it is not option, nor flag, nor argument
        $ret['commands'][] = $arg;
        continue;
    }

    if (!count($ret['options']) && !count($ret['flags']))
    {
        $ret['arguments'] = array_merge($ret['commands'], $ret['arguments']);
        $ret['commands'] = array();
    }
    return $ret;
}

exit (0);
